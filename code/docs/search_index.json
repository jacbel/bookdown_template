[["index.html", "A minimal bookdown example 1 Workflow 1.1 Installing bookdown 1.2 How it works 1.3 Packages 1.4 Publishing on GitHub Pages", " A minimal bookdown example Jacob Bellmund 1 Workflow This is a minimal example for a bookdown project to work with R Markdown files. 1.1 Installing bookdown If you don’t have the bookdown package installed, this should be the first thing you do. To install it, run from the R console: require(&quot;bookdown&quot;) library(bookdown) 1.2 How it works Make sure to start by opening the R project file. This will set R Studio’s working directory to be the root directory of the (example) project. To render the example book, just run the command below from the R Studio console. bookdown::render_book() This will use the file **“_bookdown.yml”** that contains some relevant settings. Bookdown will start with the file index.Rmd in the project folder. Crucially, the _bookdown.yml tells bookdown to use all R Markdown files that are in the code directory. They will be used in alphabetical order, so prepending script names with numbers can be a useful way of making sure the chapters appear in the correct order. The output is written to the docs folder, which you can find in the code directory. Just click index.html to get started. Your data should be in the data directory. 1.3 Packages I suggest installing/loading packages in this index file. Add more packages as needed. if(!require(&quot;here&quot;)){install.packages(&quot;here&quot;)} ## Loading required package: here ## here() starts at /Users/bellmund/ownCloud/projects/bookdown_template library(here) if(!require(&quot;tidyverse&quot;)){install.packages(&quot;tidyverse&quot;)} ## Loading required package: tidyverse ## ── Attaching packages ──────────────────────────────────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.6 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.4 ✓ stringr 1.4.0 ## ✓ readr 2.1.1 ✓ forcats 0.5.1 ## ── Conflicts ─────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(tidyverse) The code above installs (if necessary) and loads the here package, which is very useful for the project-oriented workflow in R. It uses the top-level directory of the project to easily build paths to files. What does that mean? The here package will work from the top-level directory, which is the one where your R-project file is located (this is why it is important to load the project file!). Let’s see which one this is: here::dr_here() ## here() starts at /Users/bellmund/ownCloud/projects/bookdown_template. ## - This directory contains a file matching &quot;[.]Rproj$&quot; with contents matching &quot;^Version: &quot; in the first line ## - Initial working directory: /Users/bellmund/ownCloud/projects/bookdown_template ## - Current working directory: /Users/bellmund/ownCloud/projects/bookdown_template Now why is this useful? You can use this to very easily build file names to the files in this directory, while the entire project remains easily portable. For example, let’s see which files are hidden in the code directory: list.files(here::here(&quot;code&quot;)) ## [1] &quot;02_example_chapter.Rmd&quot; &quot;docs&quot; 1.4 Publishing on GitHub Pages These information are from the bookdown documentation, so credit goes to Yihui Xie. GitHub Pages is a convenient and free way to publish your book using the static HTML output generated via bookdown. You need to tell GitHub to not use the Jekyll website builder in this case. To do that you need to include a file called .nojekyll in the docs folder where the HTML output of this book is stored. Let’s create this file if it doesn’t exist yet. if (!file.exists(here(&quot;docs&quot;, &quot;.nojekyll&quot;))){ file.create(&#39;.nojekyll&#39;) } ## [1] TRUE If you haven’t set up your GitHub repo for the project, now is the time to do it. Now to set up your GitPages, go to the GitHub repository’s settings and under Pages change the Master Branch and the /docs folder as the Source. After saving, you will see the URL where your page is served. "],["test-chapter.html", "2 Test Chapter", " 2 Test Chapter This is the first chapter. You can treat the chapters as individual R Markdown files. You can write text that explains what is going on in the code and format it using R markdown syntax (Cheat sheet for quick start here) Your code goes into code chunks. a &lt;- 1 b &lt;- 2 c &lt;- a + b c ## [1] 3 And you can print things from your R chunks: summary(mtcars) ## mpg cyl disp hp drat wt ## Min. :10.40 Min. :4.000 Min. : 71.1 Min. : 52.0 Min. :2.760 Min. :1.513 ## 1st Qu.:15.43 1st Qu.:4.000 1st Qu.:120.8 1st Qu.: 96.5 1st Qu.:3.080 1st Qu.:2.581 ## Median :19.20 Median :6.000 Median :196.3 Median :123.0 Median :3.695 Median :3.325 ## Mean :20.09 Mean :6.188 Mean :230.7 Mean :146.7 Mean :3.597 Mean :3.217 ## 3rd Qu.:22.80 3rd Qu.:8.000 3rd Qu.:326.0 3rd Qu.:180.0 3rd Qu.:3.920 3rd Qu.:3.610 ## Max. :33.90 Max. :8.000 Max. :472.0 Max. :335.0 Max. :4.930 Max. :5.424 ## qsec vs am gear carb ## Min. :14.50 Min. :0.0000 Min. :0.0000 Min. :3.000 Min. :1.000 ## 1st Qu.:16.89 1st Qu.:0.0000 1st Qu.:0.0000 1st Qu.:3.000 1st Qu.:2.000 ## Median :17.71 Median :0.0000 Median :0.0000 Median :4.000 Median :2.000 ## Mean :17.85 Mean :0.4375 Mean :0.4062 Mean :3.688 Mean :2.812 ## 3rd Qu.:18.90 3rd Qu.:1.0000 3rd Qu.:1.0000 3rd Qu.:4.000 3rd Qu.:4.000 ## Max. :22.90 Max. :1.0000 Max. :1.0000 Max. :5.000 Max. :8.000 And cool figures via R chunks ggplot(mtcars, aes(x=cyl, y=mpg, color=gear)) + geom_point() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
